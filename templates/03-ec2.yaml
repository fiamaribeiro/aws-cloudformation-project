AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 public instance with Apache (Hello DIO/Fiama)'

Parameters:
  VpcId:
    Type: String
    Description: VPC ID (from Stack 01)
  PublicSubnetId:
    Type: String
    Description: Public Subnet ID (from Stack 01)
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.nano, t3.micro, t3.small]
  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  TagOwner:
    Type: String
    Default: Fiama

Resources:
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: dio-sg-web-fiama
        - Key: Owner
          Value: !Ref TagOwner

  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetId
          GroupSet:
            - !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: dio-ec2-web-fiama
        - Key: Owner
          Value: !Ref TagOwner
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf -y update
          dnf -y install httpd
          systemctl enable httpd
          systemctl start httpd
          echo '<h1>CloudFormation running - Hello DIO/Fiama</h1>' > /var/www/html/index.html

Outputs:
  InstancePublicIp:
    Description: Public IP
    Value: !GetAtt WebServer.PublicIp
  WebUrl:
    Description: Test URL (HTTP)
    Value: !Sub 'http://${WebServer.PublicIp}'
